name: material/sample
properties:

  # unifrom is not supported yet
  [Tint, Rgba]: (0,0,0,1)
  [Height, Range(0, 1)]: .5f  # the type with () is handled for certain types. And property definition also support [], which is in the yaml spec

  PhysicalAttr: {             # this is a property block
    [Smoothness, float]: 10.f, # same as defining property
    [foo000, float]: [.5f, 1.f, 3.f], 
  }

  # for texture, [0] is texture type, [1] is path/id, [2] is POINT|LINEAR|.. and I don't even need "" for the path string lol
  TexDiffuse: [0, path/to/texture/or/id, LINEAR]

shader:
  # bascially the same to the way to define the shader
  # in this case, the shader would be managed by the material
  &! format.shader

  # also support reference the resource
  name: shader/sample
  #then these state thing will be considered as override if exists and will causing clone the res shader. The cloned shader is also managed by the material
  cull: back|front|none
  fill: solid|wire
  frontface: ccw|cw
  blend: false
  #...